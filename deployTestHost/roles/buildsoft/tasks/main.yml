- name: Create temp directory
  file: path={{ temp_dir }} state=directory

- name: Create /usr/local/bin
  file: path=/usr/local/bin state=directory
  
- name: Create /usr/local/sbin
  file: path=/usr/local/sbin state=directory

- name: "Install PreReq Debian"
  apt: name={{ item }} state=present
  with_items:
   - git
   - unzip
   - automake
   - tcl-dev
   - libpcap-dev
   - libgnutls-dev
   - libssl-dev
   - libmysqlclient-dev
   - cmake
   - bison
   - flex
   - libnet1-dev
   - texinfo
  when:  ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: "Install PreReq RHEL/CentOS"
  yum: name={{ item }} state=present
  with_items:
   - git
   - unzip
   - automake
   - openssl-devel
  when:  ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Fix pcap header libraries for fping
  file: src=/usr/include/pcap/bpf.h dest=/usr/include/net/bpf.h state=link

- name: Pull hard to find code from GIT
  git: repo={{ git_repo }} dest={{ temp_dir }}/hardtofind accept_hostkey=True depth=1

- name: build hard to find code
  shell: chdir={{ temp_dir }}/hardtofind ./install.sh creates=/usr/local/bin/unicornscan

# Setup virtualenv
- name: Pull virtualenv
  git: repo={{ virtualenv_repo }} dest={{ temp_dir }}/virtualenv accept_hostkey=True depth=1

- name: Deploy virtualenv
  shell: chdir=/usr/local python {{ temp_dir }}/virtualenv/virtualenv.py . creates=/usr/local/bin/activate

# Setup hping
- name: Pull hping
  git: repo={{ hping_repo }} dest={{ temp_dir }}/hping accept_hostkey=True depth=1

- name: Compile and install hping
  shell: chdir={{ temp_dir }}/hping ./configure && make && make strip && make install creates=/usr/sbin/hping3

# Setup tcptraceroute
- name: Pull tcptraceroute
  git: repo={{ tcptraceroute_repo }} dest={{ temp_dir }}/tcptraceroute accept_hostkey=True depth=1
  when:  ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  
- name: Compile and install tcptraceroute
  shell: chdir={{ temp_dir }}/tcptraceroute ./configure && make && make install creates=/usr/local/bin/tcptraceroute
  when:  ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  
- name: "Install tcptraceroute (Ubuntu)"
  apt: name={{ item }} state=present
  with_items:
   - tcptraceroute
  when:  ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

# Setup fping
- name: Pull fping
  git: repo={{ fping_repo }} dest={{ temp_dir }}/fping accept_hostkey=True depth=1

# Setup tcpreplay
- name: Pull tcpreplay
  git: repo={{ tcpreplay_repo }} dest={{ temp_dir }}/tcpreplay accept_hostkey=True depth=1

# Setup iperf
- name: Pull iperf
  git: repo={{ iperf_repo }} dest={{ temp_dir }}/iperf accept_hostkey=True depth=1

# Setup Scapy
- name: Retrieve Scapy
  get_url: url={{ scapy_url }} dest={{ temp_dir }}
  
- name: Unpack Scapy
  shell: chdir={{ temp_dir }} unzip {{ scapy_file }} creates={{ scapy_dir }}
  
- name: Install Scapy
  shell: chdir={{ temp_dir }}/{{ scapy_dir }} python setup.py install && cp {{ temp_dir }}/{{ scapy_dir }}/bin/scapy /usr/local/bin creates=/usr/local/bin/scapy

# Setup Golang
- name: Retrieve golang
  get_url: url={{ golang_url }} dest={{ temp_dir }}

- name: Unpack golang
  shell: chdir={{ temp_dir }} tar -xzpf {{ golang_file }} -C /usr/local creates=/usr/local/{{ golang_dir }}

- name: Set GOROOT (shell)
  copy: src=gosetenv.sh dest=/etc/profile.d/
  
- name: Set GOROOT (csh)
  copy: src=gosetenv.csh dest=/etc/profile.d/
  when:  ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

# Setup NMAP
- name: Retrieve nmap
  get_url: url={{ nmap_url }} dest={{ temp_dir }}

- name: Unpack NMAP
  shell: chdir={{ temp_dir }} tar -xf {{ nmap_file }} creates={{ nmap_dir }}

- name: Build and Install NMAP
  shell: chdir={{ temp_dir }}/{{ nmap_dir }} ./configure && make && make install creates=/usr/local/bin/nmap

# Setup ncftpclient
- name: Retrieve ncftpclient
  get_url: url={{ ncftpclient_url }} dest={{ temp_dir }}

- name: Unpack ncftp client
  shell: chdir={{ temp_dir }} tar -xf {{ ncftpclient_file }} creates={{ ncftpclient_dir }}
  
- name: Build and Install ncftp client
  shell: chdir={{ temp_dir }}/{{ ncftpclient_dir }} ./configure && make && make install creates=/usr/local/bin/ncftp

# Setup Nagios Plugins
- name: Retrieve Nagios Plugins
  get_url: url={{ nagios_plugins_url }} dest={{ temp_dir }}
